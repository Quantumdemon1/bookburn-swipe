-- Create tables first
create table public.books (
  id bigint generated by default as identity primary key,
  title text not null,
  author text not null,
  price numeric(10,2) not null,
  tags text[] not null default '{}',
  preview text not null,
  cover_url text not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

create table public.reviews (
  id bigint generated by default as identity primary key,
  book_id bigint references public.books(id) on delete cascade not null,
  user_id uuid references auth.users(id) on delete cascade not null,
  content text not null,
  rating integer not null check (rating >= 1 and rating <= 5),
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

create table public.comments (
  id bigint generated by default as identity primary key,
  review_id bigint references public.reviews(id) on delete cascade not null,
  user_id uuid references auth.users(id) on delete cascade not null,
  content text not null,
  parent_id bigint references public.comments(id) on delete cascade,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

create table public.user_preferences (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users(id) on delete cascade not null unique,
  preferences jsonb not null default '{}',
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create functions for triggers
create or replace function public.handle_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

-- Create triggers
create trigger handle_books_updated_at
  before update on public.books
  for each row
  execute function public.handle_updated_at();

create trigger handle_reviews_updated_at
  before update on public.reviews
  for each row
  execute function public.handle_updated_at();

create trigger handle_comments_updated_at
  before update on public.comments
  for each row
  execute function public.handle_updated_at();

create trigger handle_user_preferences_updated_at
  before update on public.user_preferences
  for each row
  execute function public.handle_updated_at();

-- Enable RLS after tables exist
alter table public.books enable row level security;
alter table public.reviews enable row level security;
alter table public.comments enable row level security;
alter table public.user_preferences enable row level security;

-- Create policies
create policy "Public books are viewable by everyone"
  on public.books for select
  using (true);

create policy "Reviews are viewable by everyone"
  on public.reviews for select
  using (true);

create policy "Users can create reviews"
  on public.reviews for insert
  with check (auth.uid() = user_id);

create policy "Users can update their own reviews"
  on public.reviews for update
  using (auth.uid() = user_id);

create policy "Comments are viewable by everyone"
  on public.comments for select
  using (true);

create policy "Users can create comments"
  on public.comments for insert
  with check (auth.uid() = user_id);

create policy "Users can update their own comments"
  on public.comments for update
  using (auth.uid() = user_id);

create policy "Users can manage their own preferences"
  on public.user_preferences for all
  using (auth.uid() = user_id)
  with check (auth.uid() = user_id);