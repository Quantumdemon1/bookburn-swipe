/*
  # Matching System Schema Update

  1. New Tables
    - `matching_preferences` - Stores user matching preferences
    - `book_matches` - Records book matches and user responses
    - `match_history` - Tracks matching algorithm performance
  
  2. Security
    - Enable RLS on all new tables
    - Add policies for user data access
    
  3. Changes
    - Add indexes for performance optimization
    - Add trigger for match history tracking
*/

-- Create matching preferences table
create table public.matching_preferences (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users(id) on delete cascade not null,
  genre_weights jsonb not null default '{}',
  author_weights jsonb not null default '{}',
  min_rating integer check (min_rating >= 1 and min_rating <= 5),
  max_price numeric(10,2),
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique(user_id)
);

-- Create book matches table
create table public.book_matches (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users(id) on delete cascade not null,
  book_id bigint references public.books(id) on delete cascade not null,
  match_score numeric(4,3) not null check (match_score >= 0 and match_score <= 1),
  user_response text,
  response_timestamp timestamp with time zone,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  unique(user_id, book_id)
);

-- Create match history table
create table public.match_history (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users(id) on delete cascade not null,
  algorithm_version text not null,
  success_rate numeric(4,3) not null check (success_rate >= 0 and success_rate <= 1),
  total_matches integer not null default 0,
  positive_responses integer not null default 0,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create triggers for updated_at timestamps
create trigger handle_matching_preferences_updated_at
  before update on public.matching_preferences
  for each row
  execute function public.handle_updated_at();

create trigger handle_match_history_updated_at
  before update on public.match_history
  for each row
  execute function public.handle_updated_at();

-- Enable RLS
alter table public.matching_preferences enable row level security;
alter table public.book_matches enable row level security;
alter table public.match_history enable row level security;

-- Create RLS policies
create policy "Users can manage their matching preferences"
  on public.matching_preferences for all
  using (auth.uid() = user_id)
  with check (auth.uid() = user_id);

create policy "Users can view their book matches"
  on public.book_matches for select
  using (auth.uid() = user_id);

create policy "Users can update their book matches"
  on public.book_matches for insert
  with check (auth.uid() = user_id);

create policy "Users can view their match history"
  on public.match_history for select
  using (auth.uid() = user_id);

-- Create indexes for performance
create index matching_preferences_user_id_idx on public.matching_preferences(user_id);
create index book_matches_user_id_idx on public.book_matches(user_id);
create index book_matches_book_id_idx on public.book_matches(book_id);
create index match_history_user_id_idx on public.match_history(user_id);